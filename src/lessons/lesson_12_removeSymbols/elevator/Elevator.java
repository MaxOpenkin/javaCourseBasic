package lessons.lesson_12_removeSymbols.elevator;

public class Elevator {

    // Метод, который моделирует движение лифта,
    // поднимающегося и опускающегося в здании,
    // и подсчитывает количество итераций, необходимых для достижения крыши:

    public int calculateIterations(int totalFloors, int up, int down) {
        int currentFloor = 0; // Переменная, которая представляет текущий этаж. Лифт начинает с первого этажа поэтому 0.
        int iterations = 0;
        while (currentFloor < totalFloors){     // Будет выполняться до тех пор, пока текущий этаж меньше общего количества этажей.
            currentFloor += up;     // Увеличение, представляющее количество этажей, на которое лифт поднимается за одну итерацию.
            iterations++;   // Увеличивается счетчик итераций.
            if (currentFloor >= totalFloors) {  // Проверяется, не превышает ли текущий этаж общее количество этажей.
                break;      // Если текущий этаж больше или равен общему количеству этажей, то цикл прерывается.
            }
            currentFloor -= down; // Если цикл не был прерван, то выполняется уменьшение currentFloor на значение down, представляющее количество этажей, на которое лифт опускается за одну итерацию.
        }
        return iterations; // По завершении цикла метод возвращает общее количество итераций, необходимых для того, чтобы лифт поднялся на крышу.
    }
}
