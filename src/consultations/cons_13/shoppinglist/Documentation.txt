
Проект представляет собой приложение для списка покупок с интерфейсом командной строки.
В нём реализована функциональность для добавления, удаления, поиска и отображения продуктов.
Вот основные компоненты проекта:


Основные классы:

ShoppingListApp.java: точка входа в приложение.
Инициализирует репозиторий, валидацию, сервисы и пользовательский интерфейс (UI),
а также запускает пользовательское меню.

Product.java:
сущность продукта с полями для идентификатора, имени продукта, цены и описания.
Класс Product представляет сущность продукта в приложении для списка покупок.
Он содержит поля для идентификатора продукта (id), названия продукта (productName),
цены (price) и описания (description).
Конструктор класса позволяет инициализировать эти поля при создании объекта.
Геттеры (getId, getProductName, getPrice, getDescription) предоставляют доступ к значениям полей.
Метод toString переопределен для предоставления строкового представления объекта Product,
включающего в себя его идентификатор, название, цену и описание.

ProductDto.java: объект передачи данных продукта, используемый для передачи данных между слоями.

ProductForClient.java: объект передачи данных для клиента, содержащий информацию о продукте.

ProductService.java:
сервисный слой, обрабатывающий бизнес-логику, включая добавление нового продукта,
поиск всех продуктов, поиск по ID и удаление продукта.
Класс ProductService отвечает за бизнес-логику обработки продуктов в приложении списка покупок.
В нем реализованы методы для добавления нового продукта (addNewProduct), поиска всех продуктов (findAll),
поиска продукта по ID (findById) и удаления продукта по ID (deleteById).
Каждый из этих методов использует валидацию входных данных и взаимодействует
с репозиторием для выполнения операций над продуктами.
В зависимости от результата операций, методы возвращают ответы, содержащие либо данные о продукте,
либо информацию об ошибках.

Validation.java: класс валидации для проверки входных данных продукта.


Ошибки и ответы:

ErrorCode.java: перечисление кодов ошибок.

ErrorDto.java: объект передачи данных ошибки, содержащий информацию об ошибке.

ResponseForClientAddProduct, ResponseForClientFindAllProducts,
ResponseForClientFindByIdProduct, ResponseForClientForDelete:
классы ответов для различных операций с продуктами, содержащие результаты выполнения или ошибки.


UI и взаимодействие с пользователем:

UserMenu.java:
основной класс UI, отображающий меню пользователю и обрабатывающий его выбор.
Класс UserMenu отвечает за интерфейс пользователя, позволяя выбирать и исполнять команды из списка.
Пользователю предлагается сделать выбор из представленных опций, после чего выбранная команда исполняется.
Цикл продолжается, пока пользователь не выберет команду для выхода из приложения.

MenuCommand.java:
интерфейс для команд меню.
Интерфейс MenuCommand определяет структуру для команд меню в приложении.
Он содержит методы executeCommand, который выполняет команду, getMenuName,
возвращающий название команды меню, и shouldExit, указывающий,
должна ли команда привести к выходу из приложения.

AddProductMenu, DeleteProductMenu, FindAllProductMenu, FindByIdProductMenu, ExitMenu:
конкретные реализации команд меню для добавления, удаления, отображения всех продуктов,
поиска продукта по ID и выхода из приложения.
Класс AddProductMenu реализует интерфейс MenuCommand и предоставляет функциональность
для добавления нового продукта в список покупок.
Он запрашивает у пользователя имя продукта, описание и цену, создает на их основе ProductDto,
и использует ProductService для добавления продукта.
После добавления выводит результат операции.
Класс DeleteProductMenu реализует функциональность для удаления продукта из списка покупок.
Он запрашивает у пользователя идентификатор продукта для удаления,
вызывает метод deleteById сервиса ProductService с этим идентификатором и выводит результат операции удаления.
Класс ExitMenu реализует функциональность для выхода из приложения.
При выборе этой опции пользователем, приложение выводит прощальное сообщение и завершает свою работу.
Класс FindAllProductMenu реализует функциональность для отображения всех продуктов в списке покупок.
При выполнении этой команды, он использует сервис ProductService для получения и вывода списка всех продуктов.
Класс FindByIdProductMenu реализует функциональность для поиска продукта по ID.
Он запрашивает у пользователя идентификатор продукта,
использует сервис ProductService для поиска и выводит результат поиска.


Вспомогательные классы:

UserInput.java:
утилитный класс для чтения ввода пользователя.
Класс UserInput предназначен для удобства ввода данных пользователем через командную строку.
Он использует Scanner для считывания текстовых данных (getText),
целочисленных значений (getInt) и чисел с плавающей точкой (getDouble),
введенных пользователем. Для каждого типа данных предусмотрен соответствующий метод,
который выводит сообщение (подсказку) и возвращает введенное значение.

ProductRepository и его реализация ProductRepositoryArrayList:
интерфейс и его реализация для хранения продуктов.
Реализация репозитория продуктов, использующего ArrayList для хранения данных.
Каждая операция (добавление, поиск, удаление) работает непосредственно с этим списком,
обеспечивая базовую функциональность управления продуктами в памяти.


Вся логика приложения организована вокруг создания, поиска и управления продуктами в списке покупок.
Пользователь может взаимодействовать с приложением через текстовое меню,
выбирая необходимые действия (добавление, удаление, поиск продуктов и т.д.).
Валидация входных данных продукта обеспечивает корректность данных перед их обработкой и сохранением.


