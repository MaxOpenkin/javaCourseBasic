Теоретические вопросы по Java Core для самооценки и подготовки к собеседованию
Основы Java:

Что такое Java?
Объясните принципы ООП на примере Java.
В чем разница между JDK и JRE?
Что такое garbage collection в Java?
Типы данных и переменные:

Какие типы данных есть в Java?
Что такое автоупаковка и автораспаковка?
Объясните разницу между stack и heap памятью.
Управляющие конструкции:

Как работает цикл for в Java?
В чем разница между if-else и switch-case?
Классы и объекты:

Что такое конструктор в Java?
Объясните концепцию наследования в Java.
В чем разница между интерфейсом и абстрактным классом?
Исключения:

Что такое исключение в Java?
Объясните разницу между checked и unchecked исключениями.
Коллекции:

Какие основные интерфейсы коллекций существуют в Java?
В чем разница между List и Set?
Как работает HashMap?
Многопоточность:

Что такое поток в контексте Java?
Объясните концепцию синхронизации в многопоточном программировании.
Что такое deadlock и как его избежать?
Java 8 и новые версии:

Что такое лямбда-выражения в Java 8?
Как работают Stream API?
Что такое default методы в интерфейсах?
Java Virtual Machine:

Как работает JVM?
Что такое JIT компиляция?
Объясните, как устроена модель памяти в JVM.
Разработка и тестирование:

Что такое unit-тестирование в контексте Java?
Что такое Mockito и зачем он нужен?
Список вопросов, связанных с коллекциями в Java:
Основы коллекций:

Объясните иерархию коллекций в Java.
В чем разница между Collection и Collections в Java?
List, Set, Map:

Какие реализации интерфейса List вы знаете?
В чем разница между ArrayList и LinkedList?
Объясните особенности HashSet и TreeSet.
Какие основные реализации интерфейса Map существуют?
Работа с коллекциями:

Как можно синхронизировать коллекции в многопоточной среде?
Как можно отсортировать список в Java?
Что такое Comparator и Comparable?
Эффективность коллекций:

В каких случаях лучше использовать ArrayList, а в каких LinkedList?
Как работает внутренняя структура HashMap и как она влияет на производительность?
Какова сложность основных операций в различных типах коллекций (добавление, удаление, поиск)?
Изменения в коллекциях (Java 8+):

Какие нововведения в коллекциях были внедрены в Java 8?
Как использовать Stream API с коллекциями?
Concurrent Collections:

Что такое concurrent collections и в каких случаях их следует использовать?
В чем разница между ConcurrentHashMap и Hashtable?
Какие особенности у CopyOnWriteArrayList и CopyOnWriteArraySet?
Работа с коллекциями:

Как реализовать собственный итератор для коллекции?
Что такое fail-fast и fail-safe итераторы?
Как работает метод forEach в коллекциях?
Оптимизация и настройка коллекций:

Как управлять начальной емкостью коллекций, таких как ArrayList или HashMap?
Как влияет коэффициент загрузки на производительность HashMap?
Несколько вопросов, специально ориентированных на понимание объектно-ориентированного программирования (ООП) в Java:
Основы ООП:

Что такое инкапсуляция, наследование и полиморфизм в контексте Java?
Как в Java реализуется принцип абстракции?
В чем разница между статическим и динамическим полиморфизмом?
Класс Object:

Какие ключевые методы определены в классе Object?
Какие два класса в Java не являются наследниками класса Object?
Каково назначение метода clone() и как он работает?
Что делает метод getClass() и как он используется?
Контракт equals и hashCode:

В чем состоит контракт между equals и hashCode в Java?
Как правильно переопределять метод equals?
Почему важно переопределять метод hashCode, если переопределяется equals?
Приведите пример ситуации, когда нарушение контракта между equals и hashCode может привести к проблемам.
Принципы ООП на практике:

Как можно использовать композицию вместо наследования?
Приведите пример использования полиморфизма в Java.
Как интерфейсы в Java поддерживают принципы ООП?
Расширенные вопросы по ООП:

В чем разница между глубоким и поверхностным клонированием?
Каким образом можно обеспечить безопасность потоков в объектно-ориентированном коде?
Объясните концепцию "композиция над наследованием".