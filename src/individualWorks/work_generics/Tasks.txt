Реализуйте универсальный класс Box

1 Задача:
Создайте обобщенный класс Box, который может хранить любой тип объекта.
Класс должен иметь методы для установки (set) и получения (get) объекта.
Цель: Практика создания обобщенных классов и методов.
Направление: Воспользуйтесь параметром типа T для обозначения хранимого типа.
Класс Pair для хранения пары элементов

2 Задача:
Реализуйте класс Pair с использованием generics, который может хранить пару элементов разных типов.
Цель: Изучение использования нескольких параметров типа в обобщенных классах.
Направление: Используйте два параметра типа, например, <K, V> для обозначения ключа и значения пары.
Метод для обмена элементами в массиве

3 Задача:
Напишите обобщенный метод для обмена местами двух элементов в массиве любого типа.
Цель: Практика создания обобщенных методов.
Направление: Метод должен принимать массив и два индекса элементов для обмена.
Класс для фильтрации коллекций

4 Задача:
Создайте обобщенный интерфейс Predicate<T> и класс CollectionUtils, с методом filter,
который фильтрует элементы коллекции, используя предикат.
Цель: Изучение использования обобщений с коллекциями и функциональными интерфейсами.
Направление: Метод filter должен принимать коллекцию элементов и предикат, определяющий,
должен ли элемент быть включен в результат.
Обобщенный класс Stack

5 Задача:
Реализуйте обобщенный класс Stack,
который представляет собой структуру данных стек с операциями push (добавление элемента)
и pop (извлечение элемента).
Цель: Практика работы со структурами данных в обобщенном стиле.
Направление: Используйте внутренний список или массив для хранения элементов стека.
Метод для создания карты с группировкой

6 Задача:
Напишите метод group, который принимает коллекцию объектов и классификатор (функцию),
группируя объекты по некоторому критерию и возвращая карту с результатами группировки.
Цель: Углубленное понимание использования обобщений с функциональными интерфейсами и потоками.
Направление: Размышляйте о том, как использовать Function<T, R> для классификации
и Collectors.groupingBy для группировки, если используете потоки из Java Stream API.


Обобщённый интерфейс для сравнения

7 Задача:
Создайте обобщённый интерфейс Comparator<T>, который будет определять метод compare,
принимающий два объекта типа T и возвращающий целое число.
Метод должен возвращать отрицательное число, если первый объект меньше второго, ноль, если они равны,
и положительное число, если первый объект больше второго.
Цель: Практика в создании обобщённых интерфейсов и их реализации.
Направление: Используйте этот интерфейс для сортировки массива или списка объектов.
Реализуйте обобщённый интерфейс Iterable<T>

8 Задача:
Создайте класс, который реализует обобщённый интерфейс Iterable<T>.
Этот класс должен представлять собой коллекцию элементов,
по которым можно итерироваться с использованием цикла for-each.
Цель: Изучение обхода коллекций с помощью обобщённых интерфейсов.
Направление: Обеспечьте реализацию метода iterator,
который возвращает итератор для элементов вашей коллекции.
Универсальный обработчик событий

9 Задача:
Создайте обобщённый интерфейс EventHandler<T>, который определяет метод handle,
принимающий объект типа T, представляющий событие.
Затем реализуйте несколько конкретных обработчиков для различных типов событий.
Цель: Понимание использования generics для создания гибких систем обработки событий.
Направление: Можете определить различные классы событий и создать соответствующие обработчики,
демонстрируя полиморфизм через обобщения.
Фабричный метод с использованием Generics

10 Задача:
Разработайте обобщённый интерфейс Factory<T>, который включает метод create,
возвращающий новый экземпляр типа T. Создайте несколько реализаций этого интерфейса для различных классов.
Цель: Исследование шаблона проектирования "Фабричный метод" с применением Generics.
Направление: Рассмотрите использование Reflection для создания экземпляров типа в реализации метода create.
Обобщённый кеш

11 Задача:
Создайте обобщённый класс Cache<T>, который позволяет хранить объекты любого типа.
Класс должен предоставлять методы для добавления, получения по ключу и удаления объектов из кеша.
Цель: Практика в работе с коллекциями и generics.
Направление: Используйте HashMap для хранения элементов кеша.
Подумайте о стратегиях инвалидации кеша.
Обобщённый API для запросов к базе данных

12 Задача: Разработайте обобщённый интерфейс Repository<T>,
который будет представлять собой слой для работы с базой данных для объектов типа T.
Определите методы для создания, чтения, обновления и удаления (CRUD) объектов.
Цель: Изучение применения Generics для создания универсального слоя доступа к данным.
Направление: Подумайте о том, как вы можете использовать Reflection
для автоматического маппинга объектов и их свойств на таблицы и поля базы данных.